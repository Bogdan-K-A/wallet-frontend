{"version":3,"sources":["assets/sprite.svg","component/logo/Logo.js","assets/img/tablet/tabletMan.svg","component/loginForm/LoginForm.js","component/modalTransaction/ModalTransaction.js","component/backdrop/Backdrop.js","assets/img/tablet/Frame.png","component/registrationForm/PasswordIndicator.js","component/registrationForm/registrationForm.js","component/modalLogaut/ModalLogout.js"],"names":["Logo","className","href","sprite","LoginForm","dispatch","useDispatch","useState","type","setType","errorUser","useSelector","isErrorUser","useEffect","toast","error","showHiden","e","preventDefault","stopPropagation","src","imgMan","alt","width","initialValues","email","password","onSubmit","values","userOperation","login","validationSchema","Yup","shape","required","props","touched","errors","handleChange","handleBlur","handleSubmit","style","color","height","id","placeholder","value","onChange","onBlur","onClick","to","ModalTransaction","getCredit","getCategoryCredit","getDebet","getCategoryDebet","pushDate","isSaveModalDateStatic","modalTypeTransaction","setModalTypeTransaction","Date","date","setDate","name","category","setCategory","_id","idCategory","setIdCategory","listActive","setListActive","summ","setSumm","comment","setComment","closeModalItem","closeModalTransaction","categoryClick","target","dataset","textContent","backdrop","document","querySelector","clickBackdrop","pressEsc","code","addEventListener","removeEventListener","validateSchema","sum","day","month","year","submitHandler","a","modalTransaction","getDate","getMonth","getFullYear","parseFloat","validate","console","log","message","getFinanceOpertaion","addOperation","datetime","income","undefined","dropListSelectJSX","DropMenuActive","map","elem","idx","switchActiveDebet","htmlFor","checked","defaultChecked","switchActive","number","Number","isInteger","String","split","int","float","slice","min","step","_d","inputProps","initialValue","closeOnSelect","timeFormat","maxLength","Backdrop","children","modalRoot","createPortal","PasswordIndicator","show","progress","zxcvbn","key","score","getPasswordStrength","backgroundColor","RegistrationForm","showLine","setShowLine","Frame","confirmPassword","user","register","max","oneOf","onFocus","ModalLogout","closeLogoutModal","closeModalLogout","logout"],"mappings":"0HAAe,QAA0B,oC,sHCc1BA,EAXF,WACT,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,eAEb,mBAAGF,UAAU,YAAb,yB,gJCTG,MAA0B,sC,yCCiB5BG,EAAY,WACrB,IAAMC,EAAWC,cACjB,EAAwBC,mBAAS,YAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAYC,YAAYC,KAE9BC,qBAAU,WACFH,GACAI,IAAMC,MAAML,KAEjB,CAACA,IAEJ,IAAMM,EAAY,SAAAC,GACdA,EAAEC,iBACFD,EAAEE,kBAEFV,EAD2B,aAATD,EAAsB,QAAU,aAItD,OACI,oCACI,sBAAKP,UAAU,sBAAf,UACI,qBAAKA,UAAU,YAAYmB,IAAKC,EAAQC,IAAI,GAAGC,MAAM,UACrD,gDAGJ,cAAC,IAAD,CACIC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAAAC,GACNvB,EAASwB,IAAcC,MAAMF,KAEjCG,iBAAkBC,MAAaC,MAAM,CACjCR,MAAOO,MAAaP,QAAQS,SAAS,0FACrCR,SAAUM,MAAaE,SAAS,4FAPxC,SAUK,SAAAC,GACG,IACIP,EAMAO,EANAP,OACAQ,EAKAD,EALAC,QACAC,EAIAF,EAJAE,OACAC,EAGAH,EAHAG,aACAC,EAEAJ,EAFAI,WACAC,EACAL,EADAK,aAGJ,OACI,qBAAKvC,UAAU,iBAAf,SACI,uBACI0B,SAAUa,EACVvC,UAAU,aAFd,UAII,qBAAKA,UAAU,mBAAf,SACI,cAAC,IAAD,MAEJ,wBAAOA,UAAU,oBAAjB,UACKoC,EAAOZ,OAASW,EAAQX,MACrB,qBAAKgB,MAAO,CAAEC,MAAO,OAArB,SACKL,EAAOZ,QAGZ,qBAAKgB,MAAO,CAAEE,OAAQ,UAE1B,qBAAK1C,UAAU,mBAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,cAEb,uBACIF,UAAU,oBACV2C,GAAG,QACHC,YAAY,UACZrC,KAAK,QACLsC,MAAOlB,EAAOH,MACdsB,SAAUT,EACVU,OAAQT,OAIhB,wBAAOtC,UAAU,oBAAjB,UACKoC,EAAOX,UAAYU,EAAQV,SACxB,qBAAKe,MAAO,CAAEC,MAAO,OAArB,SACKL,EAAOX,WAGZ,qBAAKe,MAAO,CAAEE,OAAQ,UAG1B,qBAAK1C,UAAU,mBAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,iBAEb,uBACIF,UAAU,oBACV2C,GAAG,WACHC,YAAY,uCACZrC,KAAMA,EACNsC,MAAOlB,EAAOF,SACdqB,SAAUT,EACVU,OAAQT,IAGZ,sBACItC,UAAU,aACVgD,QAASjC,EAFb,SAIc,UAATR,EAAmB,OAAS,YAIrC,wBACIP,UAAU,6CACVO,KAAK,SAFT,SAII,8DAGJ,cAAC,IAAD,CACI0C,GAAG,YACHjD,UAAU,wCAFd,SAII,+G,4WCrHvBkD,EAAmB,WAC5B,IAAMC,EAAYzC,YAAY0C,KACxBC,EAAW3C,YAAY4C,KACvBC,EAAW7C,YAAY8C,KAC7B,EAAwDlD,mBAAS,UAAjE,mBAAOmD,EAAP,KAA6BC,EAA7B,KACA,EAAwBpD,mBAAS,IAAIqD,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCvD,mBAAS+C,EAAS,GAAGS,MAArD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoC1D,mBAAS+C,EAAS,GAAGY,KAAzD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoC7D,oBAAS,GAA7C,mBAAO8D,EAAP,KAAmBC,EAAnB,KACA,EAAwB/D,mBAAS,IAAjC,mBAAOgE,EAAP,KAAaC,EAAb,KACA,EAA8BjE,mBAAS,IAAvC,mBAAOkE,EAAP,KAAgBC,EAAhB,KAEMrE,EAAWC,cAGjB,SAASqE,IACLtE,EAASuE,eAsCb,SAASC,EAAc5D,GACnBmD,EAAcnD,EAAE6D,OAAOC,QAAQnC,IAC/BqB,EAAYhD,EAAE6D,OAAOE,aACrBV,GAAeD,GAtCnBxD,qBAAU,WACN,IAAMoE,EAAWC,SAASC,cAAc,aAExC,SAASC,EAAcnE,GACfA,EAAE6D,SAAWG,GACbN,IAIR,SAASU,EAASpE,GACC,WAAXA,EAAEqE,MACFX,IAOR,OAHAO,SAASK,iBAAiB,QAASH,GACnCF,SAASK,iBAAiB,UAAWF,GAE9B,WACHH,SAASM,oBAAoB,QAASJ,GACtCF,SAASM,oBAAoB,UAAWH,MAE7C,CAACV,IACJ9D,qBAAU,WACF2C,GACAmB,MAEL,CAACnB,IAoEJ,IAAMiC,EAAiB,CACnBjF,KAAM,mBACNwD,SAAU,kBACV0B,IAAK,kBACLjB,QAAS,SACTkB,IAAK,kBACLC,MAAO,kBACPC,KAAM,mBAEJC,EAAa,uCAAG,WAAM7E,GAAN,eAAA8E,EAAA,6DAElB9E,EAAEC,iBACI8E,EAAmB,CACrBL,IAAK9B,EAAKoC,UACVL,MAAO/B,EAAKqC,WAAa,EACzBL,KAAMhC,EAAKsC,cACX3F,KAA+B,WAAzBkD,EACNM,SAAUG,EACVuB,IAAKU,WAAW7B,GAChBE,QAASA,GAVK,kBAcR4B,mBAASL,EAAkBP,GAdnB,8DAiBda,QAAQC,IAAI,KAAM,GAAGC,SACrB1F,IAAMC,MAAM,KAAM,GAAGyF,SAlBP,2BAsBlBnG,EACIoG,IAAoBC,aAAa,CAC7BC,SAAU9C,EACV+C,OAAiC,WAAzBlD,EACRM,SAAUG,EACVM,QAAqB,KAAZA,OAAiBoC,EAAYpC,EACtCiB,IAAKnB,KA5BK,yDAAH,sDA2CnB,IAAMuC,EACF,sBAAK7G,UAAU,gBAAf,UACI,qBAAKA,UAZb,WACI,GAAiB,4GAAb+D,EAAmC,CAInC,MAAM,GAAN,OAHiB,YAGjB,YAFe,mBAKnB,MAAO,YAIa+C,GAAkB9D,QArH1C,WACIqB,GAAeD,IAoHX,SACI,sBAAMpE,UAAU,eAAhB,SAAgC+D,MAGnCK,GACG,qBAAIpE,UAAU,WAAd,UAE8B,WAAzByD,GACGJ,EAAS0D,KAAI,SAACC,EAAMC,GAChB,OACI,oBACIjE,QAAS4B,EACT5E,UAAU,eAEV,UAASgH,EAAK/C,IAJlB,SAMK+C,EAAKlD,MAHDmD,MASK,aAAzBxD,GACGN,EAAU4D,KAAI,SAACC,EAAMC,GACjB,OACI,oBACIjE,QAAS4B,EACT5E,UAAU,eAEV,UAASgH,EAAK/C,IAJlB,SAMK+C,EAAKlD,MAHDmD,SAU7B,sBAAMjH,UAAU,gBAAhB,SACI,qBAAKA,UAAU,WAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,2BAMzB,OACI,sBAAKF,UAAU,iBAAf,UACI,qBAAKA,UAAU,iBAAiBgD,QAAS0B,EAAzC,SACI,sBAAM1E,UAAU,iBAAhB,SACI,qBAAKA,UAAU,eAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,uBAIrB,oBAAIF,UAAU,YAAd,+GACA,uBACI0B,SAAUmE,EACVlD,GAAG,mBACH3C,UAAU,YAHd,UAKI,sBAAKA,UAAU,oBAAf,UACI,sBAAMA,UAnKtB,WACI,GAA6B,WAAzByD,EAAmC,CAGnC,MAAM,GAAN,OAFiB,0BAEjB,YADe,mCAInB,MAAO,0BA4JsByD,GAAjB,4CACA,sBAAKlH,UAAU,sBAAf,UACI,uBACIA,UAAU,iBACVmH,QAAQ,eAEZ,sBAAMnH,UA/KO,WAAzByD,EACO,eAEJ,qBA4K0Cd,GAAG,SAApC,SACI,qBAAK3C,UAAU,eAAf,SACI,qBACIC,KACI,UACSC,IADgB,WAAzBuD,EAAA,mCAQpB,uBACIzD,UAAU,oBACV8C,SAnJpB,SAA4B9B,GACxB,IAAKA,EAAE6D,OAAOuC,QAIV,OAHA1D,EAAwB,YACxBM,EAAY,gHACZG,EAAc,MAGlBT,EAAwB,UACxBM,EAAYX,EAAS,GAAGS,MACxBK,EAAcd,EAAS,GAAGY,MA2IVH,KAAK,uBACLvD,KAAK,WACLoC,GAAG,aACH0E,gBAAc,IAElB,sBAAMrH,UApLtB,WACI,GAA6B,aAAzByD,EAAqC,CAGrC,MAAM,GAAN,OAFiB,0BAEjB,YADe,mCAInB,MAAO,0BA6KsB6D,GAAjB,2DAEHT,EACD,qBAAK7G,UAAU,eAAf,SACI,uBACIA,UAAU,WACV8C,SAhLpB,SAAmB9B,GACf,IAAMuG,EAASC,OAAOxG,EAAE6D,OAAOhC,OAG/B,GAFgB2E,OAAOC,UAAUF,GAQjChD,EAAQvD,EAAE6D,OAAOhC,WANjB,CACI,MAAqB6E,OAAOH,GAAQI,MAAM,KAA1C,mBAAOC,EAAP,KAAYC,EAAZ,KACAtD,EAAQ,GAAD,OAAIqD,EAAJ,YAAWC,EAAMC,MAAM,EAAG,OA2KrBjF,MAAOyB,EACPrC,UAAQ,EACR8F,IAAI,OACJC,KAAK,OACLzH,KAAK,SACLqC,YAAY,WAGpB,sBAAK5C,UAAU,oBAAf,UACI,cAAC,IAAD,CACI8C,SAjOpB,SAAoB9B,GAChB6C,EAAQ7C,EAAEiH,KAiOMC,WAAY,CAAElI,UAAW,iBACzBmI,aAAcvE,EACdwE,eAAe,EACfC,YAAY,IAEhB,qBAAKrI,UAAU,eAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,uBAGjB,qBAAKF,UAAU,mBAAf,SACI,0BACIsI,UAAU,MACVtI,UAAU,eACV4C,YAAY,mDACZE,SA7LpB,SAAsB9B,GAClByD,EAAWzD,EAAE6D,OAAOhC,QA6LJA,MAAO2B,MAGf,sBAAKxE,UAAU,kBAAf,UACI,wBAAQA,UAAU,eAAeO,KAAK,SAAtC,kDAGA,wBAAQP,UAAU,eAAegD,QAAS0B,EAA1C,8E,QCrTP6D,G,OAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBC,EAAYxD,SAASC,cAAc,cACzC,OAAOwD,uBACH,qBAAK/F,GAAG,WAAW3C,UAAU,WAA7B,SACKwI,IAELC,K,4CCVO,MAA0B,kC,0BCKlC,SAASE,EAAT,GAAgD,IAAnBC,EAAkB,EAAlBA,KAAMnH,EAAY,EAAZA,SACjCoH,EAAWC,IAAOrH,GAClBsH,EAAuB,IAAjBF,EAASG,MAAc,EAE7BC,EAAsB,WAEzB,OAAQJ,EAASG,OACd,KAAK,EACF,MAAO,MACV,KAAK,EACF,MAAO,UACV,KAAK,EACF,MAAO,UACV,KAAK,EACF,MAAO,UACV,KAAK,EACF,MAAO,UAEV,QACG,MAAO,SAWhB,OACG,mCACIJ,GAAS,sBAAM5I,UAAU,iBAAiBwC,MAPd,CAChClB,MAAM,GAAD,OAAKyH,EAAL,KACLG,gBAAiBD,S,YCjBVE,EAAmB,WAC5B,IAAM/I,EAAWC,cACjB,EAAwBC,mBAAS,YAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAO8I,EAAP,KAAiBC,EAAjB,KACM5I,EAAYC,YAAYC,KAE9BC,qBAAU,WACFH,GACAI,IAAMC,MAAML,KAEjB,CAACA,IAEJ,IAAMM,EAAY,SAAAC,GACdA,EAAEC,iBACFD,EAAEE,kBAEFV,EAD2B,aAATD,EAAsB,QAAU,aAItD,OACI,0BAASP,UAAU,WAAnB,UACI,qBAAKA,UAAU,iBAAf,SACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,MAAMmB,IAAKmI,EAAOjI,IAAI,KACrC,oBAAIrB,UAAU,QAAd,8BAIR,cAAC,IAAD,CACIuB,cAAe,CACXC,MAAO,GACPC,SAAU,GACV8H,gBAAiB,GACjBzF,KAAM,IAGVpC,SAAU,YAAgC,IAChC8H,EAAO,CAAE1F,KADsB,EAA5BA,KACYtC,MADgB,EAAtBA,MACaC,SADS,EAAfA,UAGtBrB,EAASwB,IAAc6H,SAASD,KAGpC1H,iBAAkBC,MAAaC,MAAM,CACjCR,MAAOO,MACFP,QACAuG,IAAI,IACJ2B,IAAI,IACJzH,SAAS,0FACdR,SAAUM,MACLE,SAAS,0FACT8F,IAAI,EAAG,oOACP2B,IACG,GACA,+NAERH,gBAAiBxH,MACZE,SAAS,0FACT0H,MACG,CAAC5H,IAAQ,YAAa,MACtB,wHAER+B,KAAM/B,MACDgG,IAAI,EAAG,uIACP2B,IAAI,GAAI,+KACRzH,SAAS,4FApCtB,SAuCK,SAAAC,GACG,IACIP,EAMAO,EANAP,OACAQ,EAKAD,EALAC,QACAC,EAIAF,EAJAE,OACAC,EAGAH,EAHAG,aACAC,EAEAJ,EAFAI,WACAC,EACAL,EADAK,aAEJ,OACI,qBAAKvC,UAAU,eAAf,SAEI,uBAAMA,UAAU,OAAO0B,SAAUa,EAAjC,UAEI,qBAAKvC,UAAU,aAAf,SACI,cAAC,IAAD,MAIJ,wBAAOA,UAAU,cAAjB,UACKoC,EAAOZ,OAASW,EAAQX,MACrB,qBAAKgB,MAAO,CAAEC,MAAO,OAArB,SACKL,EAAOZ,QAGZ,qBAAKgB,MAAO,CAAEE,OAAQ,UAG1B,qBAAK1C,UAAU,aAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,cAEb,uBACIF,UAAU,cACVO,KAAK,QACLuD,KAAK,QACLlB,YAAY,SACZE,SAAUT,EACVU,OAAQT,EACRO,MAAOlB,EAAOH,WAKtB,wBAAOxB,UAAU,cAAjB,UACKoC,EAAOX,UAAYU,EAAQV,SACxB,qBAAKe,MAAO,CAAEC,MAAO,OAArB,SACKL,EAAOX,WAGZ,qBAAKe,MAAO,CAAEE,OAAQ,UAE1B,qBAAK1C,UAAU,aAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,iBAEb,uBACIF,UAAU,cACVO,KAAMA,EACNuD,KAAK,WACLlB,YAAY,uCACZE,SAAUT,EAEVuH,QAAS,kBAAMP,GAAY,IAC3BtG,OAAQT,EACRO,MAAOlB,EAAOF,WAElB,sBACIzB,UAAU,aACVgD,QAASjC,EAFb,SAIc,UAATR,EAAmB,OAAS,YAKrC,wBAAOP,UAAU,cAAjB,UACKoC,EAAOmH,iBACRpH,EAAQoH,gBACJ,qBAAK/G,MAAO,CAAEC,MAAO,OAArB,SACKL,EAAOmH,kBAGZ,qBAAK/G,MAAO,CAAEE,OAAQ,UAE1B,qBAAK1C,UAAU,aAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,iBAEb,uBACIF,UAAU,cACVO,KAAK,WACLuD,KAAK,kBACLlB,YAAY,0GACZE,SAAUT,EACVU,OAAQT,EACRO,MAAOlB,EAAO4H,kBAElB,cAACZ,EAAD,CACIC,KAAMQ,EACN3H,SAAUE,EAAOF,cAKzB,wBAAOzB,UAAU,cAAjB,UACKoC,EAAO0B,MAAQ3B,EAAQ2B,KACpB,qBAAKtB,MAAO,CAAEC,MAAO,OAArB,SACKL,EAAO0B,OAGZ,qBAAKtB,MAAO,CAAEE,OAAQ,UAE1B,qBAAK1C,UAAU,aAAf,SACI,qBAAKC,KAAI,UAAKC,IAAL,aAEb,uBACIF,UAAU,cACVO,KAAK,OACLuD,KAAK,OACLlB,YAAY,8CACZE,SAAUT,EACVU,OAAQT,EACRO,MAAOlB,EAAOmC,UAKtB,wBACIvD,KAAK,SACLP,UAAU,oCAFd,0EAQA,cAAC,IAAD,CAAMiD,GAAG,SAASjD,UAAU,eAA5B,kD,iBCjNnB6J,EAAc,WACvB,IAAMzJ,EAAWC,cAEjB,SAASyJ,IACL1J,EAAS2J,eA2Bb,OAxBAnJ,qBAAU,WACN,IAAMoE,EAAWC,SAASC,cAAc,aAExC,SAASC,EAAcnE,GACfA,EAAE6D,SAAWG,GACb8E,IAIR,SAAS1E,EAASpE,GACC,WAAXA,EAAEqE,MACFyE,IAOR,OAHA7E,SAASK,iBAAiB,QAASH,GACnCF,SAASK,iBAAiB,UAAWF,GAE9B,WACHH,SAASM,oBAAoB,QAASJ,GACtCF,SAASM,oBAAoB,UAAWH,MAE7C,CAAC0E,IAGA,sBAAK9J,UAAU,kBAAf,UACI,mBAAGA,UAAU,aAAb,kFACA,gCACI,wBACIA,UAAU,YACVO,KAAK,SACLyC,QAAS,kBAAM5C,EAASwB,IAAcoI,WAH1C,SAKI,oEAEJ,wBAAQhK,UAAU,YAAYgD,QAAS8G,EAAvC,2E","file":"static/js/2.5346f414.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sprite.dddd7ad3.svg\";","import sprite from '@assets/sprite.svg';\r\nimport './logo.scss';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className=\"logo\">\r\n            <svg className=\"logo_icon\">\r\n                <use href={`${sprite}#wallet`}></use>\r\n            </svg>\r\n            <p className=\"logo_text\">Wallet</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","export default __webpack_public_path__ + \"static/media/tabletMan.c98d6b49.svg\";","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { userOperation } from '../../redux/user/user-operation';\r\nimport { isErrorUser } from '@redux/user/user-selector';\r\nimport imgMan from '../../assets/img/tablet/tabletMan.svg';\r\nimport sprite from '../../assets/sprite.svg';\r\nimport Logo from '../logo';\r\n\r\nimport './loginForm.scss';\r\nimport '../registrationForm/registrationsForm.scss';\r\n\r\nexport const LoginForm = () => {\r\n    const dispatch = useDispatch();\r\n    const [type, setType] = useState('password');\r\n    const errorUser = useSelector(isErrorUser);\r\n\r\n    useEffect(() => {\r\n        if (errorUser) {\r\n            toast.error(errorUser);\r\n        }\r\n    }, [errorUser]);\r\n\r\n    const showHiden = e => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let currentType = type === 'password' ? 'input' : 'password';\r\n        setType(currentType);\r\n    };\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"login_img_container\">\r\n                <img className=\"login_img\" src={imgMan} alt=\"\" width=\"435px\" />\r\n                <h1>Finance App</h1>\r\n            </div>\r\n\r\n            <Formik\r\n                initialValues={{ email: '', password: '' }}\r\n                onSubmit={values => {\r\n                    dispatch(userOperation.login(values));\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    email: Yup.string().email().required(\"Обов'язкове поле\"),\r\n                    password: Yup.string().required(\"Обов'язкове поле\"),\r\n                })}\r\n            >\r\n                {props => {\r\n                    const {\r\n                        values,\r\n                        touched,\r\n                        errors,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                    } = props;\r\n\r\n                    return (\r\n                        <div className=\"form_bg_filter\">\r\n                            <form\r\n                                onSubmit={handleSubmit}\r\n                                className=\"login_form\"\r\n                            >\r\n                                <div className=\"login_form__logo\">\r\n                                    <Logo />\r\n                                </div>\r\n                                <label className=\"login_form__label\">\r\n                                    {errors.email && touched.email ? (\r\n                                        <div style={{ color: 'red' }}>\r\n                                            {errors.email}\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div style={{ height: '19px' }}></div>\r\n                                    )}\r\n                                    <svg className=\"login_form__icon\">\r\n                                        <use href={`${sprite}#email`}></use>\r\n                                    </svg>\r\n                                    <input\r\n                                        className=\"login_form__input\"\r\n                                        id=\"email\"\r\n                                        placeholder=\" E-mail\"\r\n                                        type=\"email\"\r\n                                        value={values.email}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </label>\r\n\r\n                                <label className=\"login_form__label\">\r\n                                    {errors.password && touched.password ? (\r\n                                        <div style={{ color: 'red' }}>\r\n                                            {errors.password}\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div style={{ height: '19px' }}></div>\r\n                                    )}\r\n\r\n                                    <svg className=\"login_form__icon\">\r\n                                        <use href={`${sprite}#password`}></use>\r\n                                    </svg>\r\n                                    <input\r\n                                        className=\"login_form__input\"\r\n                                        id=\"password\"\r\n                                        placeholder=\"Пароль\"\r\n                                        type={type}\r\n                                        value={values.password}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n\r\n                                    <span\r\n                                        className=\"form__show\"\r\n                                        onClick={showHiden}\r\n                                    >\r\n                                        {type === 'input' ? 'HIDE' : 'SHOW'}\r\n                                    </span>\r\n                                </label>\r\n\r\n                                <button\r\n                                    className=\"login_form__btn login_form__btn--current  \"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    <span>Вхід</span>\r\n                                </button>\r\n\r\n                                <Link\r\n                                    to=\"/register\"\r\n                                    className=\"login_form__btn login_form__btn_color\"\r\n                                >\r\n                                    <span>Реєстрація</span>\r\n                                </Link>\r\n                            </form>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </section>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Datetime from 'react-datetime';\r\nimport {\r\n    getCategoryDebet,\r\n    getCategoryCredit,\r\n} from '@redux/categories/categories-selector';\r\nimport { isSaveModalDateStatic } from '@redux/finance/finance-selector';\r\nimport { getFinanceOpertaion } from '@redux/finance/finance-operation';\r\nimport { closeModalTransaction } from '@redux/finance/finance-slice';\r\nimport 'moment/locale/ru';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport sprite from '@assets/sprite.svg';\r\nimport './modalTransaction.scss';\r\n\r\nimport { validate } from 'indicative/validator';\r\nexport const ModalTransaction = () => {\r\n    const getCredit = useSelector(getCategoryCredit);\r\n    const getDebet = useSelector(getCategoryDebet);\r\n    const pushDate = useSelector(isSaveModalDateStatic);\r\n    const [modalTypeTransaction, setModalTypeTransaction] = useState('income');\r\n    const [date, setDate] = useState(new Date());\r\n    const [category, setCategory] = useState(getDebet[0].name);\r\n    const [idCategory, setIdCategory] = useState(getDebet[0]._id);\r\n    const [listActive, setListActive] = useState(false);\r\n    const [summ, setSumm] = useState('');\r\n    const [comment, setComment] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    function closeModalItem() {\r\n        dispatch(closeModalTransaction());\r\n    }\r\n\r\n    useEffect(() => {\r\n        const backdrop = document.querySelector('#backdrop');\r\n\r\n        function clickBackdrop(e) {\r\n            if (e.target === backdrop) {\r\n                closeModalItem();\r\n            }\r\n        }\r\n\r\n        function pressEsc(e) {\r\n            if (e.code === 'Escape') {\r\n                closeModalItem();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', clickBackdrop);\r\n        document.addEventListener('keydown', pressEsc);\r\n\r\n        return function cleanup() {\r\n            document.removeEventListener('click', clickBackdrop);\r\n            document.removeEventListener('keydown', pressEsc);\r\n        };\r\n    }, [closeModalItem]);\r\n    useEffect(() => {\r\n        if (pushDate) {\r\n            closeModalItem();\r\n        }\r\n    }, [pushDate]);\r\n\r\n    function dateChange(e) {\r\n        setDate(e._d);\r\n    }\r\n    function listOpen() {\r\n        setListActive(!listActive);\r\n    }\r\n    function categoryClick(e) {\r\n        setIdCategory(e.target.dataset.id);\r\n        setCategory(e.target.textContent);\r\n        setListActive(!listActive);\r\n    }\r\n\r\n    function switchToggle() {\r\n        if (modalTypeTransaction === 'income') {\r\n            return 'toggleIncome';\r\n        }\r\n        return 'toggleIncomeSwitch';\r\n    }\r\n\r\n    function switchActiveDebet() {\r\n        if (modalTypeTransaction === 'income') {\r\n            const notActiv = 'switchTypeBalance__text';\r\n            const active = 'switchTypeBalance__text__active';\r\n            return `${notActiv} ${active}`;\r\n        }\r\n\r\n        return 'switchTypeBalance__text';\r\n    }\r\n    function switchActive() {\r\n        if (modalTypeTransaction === 'spending') {\r\n            const notActiv = 'switchTypeBalance__text';\r\n            const active = 'switchTypeBalance__text__active';\r\n            return `${notActiv} ${active}`;\r\n        }\r\n\r\n        return 'switchTypeBalance__text';\r\n    }\r\n\r\n    function summInput(e) {\r\n        const number = Number(e.target.value);\r\n        const integer = Number.isInteger(number);\r\n\r\n        if (!integer) {\r\n            const [int, float] = String(number).split('.');\r\n            setSumm(`${int}.${float.slice(0, 2)}`);\r\n            return;\r\n        }\r\n\r\n        setSumm(e.target.value);\r\n    }\r\n\r\n    function commentInput(e) {\r\n        setComment(e.target.value);\r\n    }\r\n\r\n    function switchClickHandler(e) {\r\n        if (!e.target.checked) {\r\n            setModalTypeTransaction('spending');\r\n            setCategory('Виберіть категорію');\r\n            setIdCategory(null);\r\n            return;\r\n        }\r\n        setModalTypeTransaction('income');\r\n        setCategory(getDebet[0].name);\r\n        setIdCategory(getDebet[0]._id);\r\n    }\r\n    const validateSchema = {\r\n        type: 'required|boolean',\r\n        category: 'required|string',\r\n        sum: 'required|number',\r\n        comment: 'string',\r\n        day: 'required|number',\r\n        month: 'required|number',\r\n        year: 'required|number',\r\n    };\r\n    const submitHandler = async e => {\r\n        // async function submitHandler(e) {\r\n        e.preventDefault();\r\n        const modalTransaction = {\r\n            day: date.getDate(),\r\n            month: date.getMonth() + 1,\r\n            year: date.getFullYear(),\r\n            type: modalTypeTransaction === 'income' ? true : false,\r\n            category: idCategory,\r\n            sum: parseFloat(summ),\r\n            comment: comment,\r\n        };\r\n\r\n        try {\r\n            await validate(modalTransaction, validateSchema);\r\n            // closeModalItem();\r\n        } catch (error) {\r\n            console.log(error[0].message);\r\n            toast.error(error[0].message);\r\n            return;\r\n        }\r\n\r\n        dispatch(\r\n            getFinanceOpertaion.addOperation({\r\n                datetime: date,\r\n                income: modalTypeTransaction === 'income' ? true : false,\r\n                category: idCategory,\r\n                comment: comment === '' ? undefined : comment,\r\n                sum: summ,\r\n            }),\r\n        );\r\n    };\r\n    // випадающий список\r\n    function DropMenuActive() {\r\n        if (category !== 'Виберіть категорію') {\r\n            const notActiv = 'dropField';\r\n            const active = 'dropFieldActive';\r\n\r\n            return `${notActiv} ${active}`;\r\n        }\r\n\r\n        return 'dropField';\r\n    }\r\n    const dropListSelectJSX = (\r\n        <div className=\"dropContainer\">\r\n            <div className={DropMenuActive()} onClick={listOpen}>\r\n                <span className=\"categoryDrop\">{category}</span>\r\n            </div>\r\n\r\n            {listActive && (\r\n                <ul className=\"dropList\">\r\n                    {/* категории для доходв */}\r\n                    {modalTypeTransaction === 'income' &&\r\n                        getDebet.map((elem, idx) => {\r\n                            return (\r\n                                <li\r\n                                    onClick={categoryClick}\r\n                                    className=\"dropListItem\"\r\n                                    key={idx}\r\n                                    data-id={elem._id}\r\n                                >\r\n                                    {elem.name}\r\n                                </li>\r\n                            );\r\n                        })}\r\n\r\n                    {/* категории для расхода */}\r\n                    {modalTypeTransaction === 'spending' &&\r\n                        getCredit.map((elem, idx) => {\r\n                            return (\r\n                                <li\r\n                                    onClick={categoryClick}\r\n                                    className=\"dropListItem\"\r\n                                    key={idx}\r\n                                    data-id={elem._id}\r\n                                >\r\n                                    {elem.name}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                </ul>\r\n            )}\r\n\r\n            <span className=\"dropIconModal\">\r\n                <svg className=\"dropIcon\">\r\n                    <use href={`${sprite}#dropItemModal`}></use>\r\n                </svg>\r\n            </span>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"modalContainer\">\r\n            <div className=\"containerClose\" onClick={closeModalItem}>\r\n                <span className=\"itemCloseModal\">\r\n                    <svg className=\"iconCloseBtn\">\r\n                        <use href={`${sprite}#closeModal`}></use>\r\n                    </svg>\r\n                </span>\r\n            </div>\r\n            <h2 className=\"titleText\">Додати Транзакцію</h2>\r\n            <form\r\n                onSubmit={submitHandler}\r\n                id=\"modalTransaction\"\r\n                className=\"modalForm\"\r\n            >\r\n                <div className=\"switchTypeBalance\">\r\n                    <span className={switchActiveDebet()}>Дохід</span>\r\n                    <div className=\"toggleContainerType\">\r\n                        <label\r\n                            className=\"toggleTypeBody\"\r\n                            htmlFor=\"switchType\"\r\n                        ></label>\r\n                        <span className={switchToggle()} id=\"toggle\">\r\n                            <svg className=\"modalBtnPlus\">\r\n                                <use\r\n                                    href={\r\n                                        modalTypeTransaction === 'income'\r\n                                            ? `${sprite}#plusSvg`\r\n                                            : `${sprite}#modalMinus`\r\n                                    }\r\n                                ></use>\r\n                            </svg>\r\n                        </span>\r\n                    </div>\r\n                    <input\r\n                        className=\"switchToggleInput\"\r\n                        onChange={switchClickHandler}\r\n                        name=\"modalTypeTransaction\"\r\n                        type=\"checkbox\"\r\n                        id=\"switchType\"\r\n                        defaultChecked\r\n                    />\r\n                    <span className={switchActive()}>Витрати</span>\r\n                </div>\r\n                {dropListSelectJSX}\r\n                <div className=\"sumContainer\">\r\n                    <input\r\n                        className=\"sumField\"\r\n                        onChange={summInput}\r\n                        value={summ}\r\n                        required\r\n                        min=\"0.00\"\r\n                        step=\"0.01\"\r\n                        type=\"number\"\r\n                        placeholder=\"0.00\"\r\n                    />\r\n                </div>\r\n                <div className=\"calendarContainer\">\r\n                    <Datetime\r\n                        onChange={dateChange}\r\n                        inputProps={{ className: 'calendarField' }}\r\n                        initialValue={date}\r\n                        closeOnSelect={true}\r\n                        timeFormat={false}\r\n                    />\r\n                    <svg className=\"calendarIcon\">\r\n                        <use href={`${sprite}#calendarSvg`}></use>\r\n                    </svg>\r\n                </div>\r\n                <div className=\"commentContainer\">\r\n                    <textarea\r\n                        maxLength=\"200\"\r\n                        className=\"commentField\"\r\n                        placeholder=\"коментар\"\r\n                        onChange={commentInput}\r\n                        value={comment}\r\n                    />\r\n                </div>\r\n                <div className=\"buttonContainer\">\r\n                    <button className=\"submitButton\" type=\"submit\">\r\n                        Додати\r\n                    </button>\r\n                    <button className=\"cancelButton\" onClick={closeModalItem}>\r\n                        Скасувати\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport './Backdrop.scss';\r\n\r\nexport const Backdrop = ({ children }) => {\r\n    const modalRoot = document.querySelector('#modalroot');\r\n    return createPortal(\r\n        <div id=\"backdrop\" className=\"backdrop\">\r\n            {children}\r\n        </div>,\r\n        modalRoot,\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Frame.5d52b14d.png\";","import React from 'react'\r\nimport './registrationsForm.scss'\r\nimport zxcvbn from 'zxcvbn';\r\n\r\n\r\nexport function PasswordIndicator({ show, password }) {\r\n   const progress = zxcvbn(password);\r\n   const key = progress.score * 100 / 4\r\n\r\n   const getPasswordStrength = () => {\r\n\r\n      switch (progress.score) {\r\n         case 0:\r\n            return 'red'\r\n         case 1:\r\n            return '#f44336'\r\n         case 2:\r\n            return '#ffed3b'\r\n         case 3:\r\n            return '#9bc158'\r\n         case 4:\r\n            return '#4caf50'\r\n\r\n         default:\r\n            return 'none'\r\n      }\r\n   }\r\n\r\n\r\n\r\n   const changePasswordColor = () => ({\r\n      width: `${key}%`,\r\n      backgroundColor: getPasswordStrength()\r\n   })\r\n\r\n   return (\r\n      <>\r\n         {show && (<span className='form__strength' style={changePasswordColor()}\r\n         />)}\r\n      </>\r\n   )\r\n}\r\n","import { useDispatch } from 'react-redux';\r\nimport { userOperation } from '../../redux/user/user-operation';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport './registrationsForm.scss';\r\nimport Logo from '../logo';\r\nimport Frame from '../../assets/img/tablet/Frame.png';\r\nimport sprite from '../../assets/sprite.svg';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { PasswordIndicator } from './PasswordIndicator';\r\nimport { isErrorUser } from '@redux/user/user-selector';\r\nimport { useSelector } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const RegistrationForm = () => {\r\n    const dispatch = useDispatch();\r\n    const [type, setType] = useState('password');\r\n    const [showLine, setShowLine] = useState(false);\r\n    const errorUser = useSelector(isErrorUser);\r\n\r\n    useEffect(() => {\r\n        if (errorUser) {\r\n            toast.error(errorUser);\r\n        }\r\n    }, [errorUser]);\r\n\r\n    const showHiden = e => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let currentType = type === 'password' ? 'input' : 'password';\r\n        setType(currentType);\r\n    };\r\n\r\n    return (\r\n        <section className=\"register\">\r\n            <div className=\"container__img\">\r\n                <div className=\"position\">\r\n                    <img className=\"img\" src={Frame} alt=\"\" />\r\n                    <h1 className=\"title\">Finance App</h1>\r\n                </div>\r\n            </div>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    email: '',\r\n                    password: '',\r\n                    confirmPassword: '',\r\n                    name: '',\r\n                }}\r\n                //відправляємо дані на сервер\r\n                onSubmit={({ name, email, password }) => {\r\n                    const user = { name, email, password };\r\n\r\n                    dispatch(userOperation.register(user));\r\n                }}\r\n                //валідація форми\r\n                validationSchema={Yup.object().shape({\r\n                    email: Yup.string()\r\n                        .email()\r\n                        .min(10)\r\n                        .max(63)\r\n                        .required(\"Обов'язкове поле\"),\r\n                    password: Yup.string()\r\n                        .required(\"Обов'язкове поле\")\r\n                        .min(6, 'Пароль занадто короткий (мінімум 6 символів)')\r\n                        .max(\r\n                            16,\r\n                            'Пароль занадто довгий (максимум 16 символів)',\r\n                        ),\r\n                    confirmPassword: Yup.string()\r\n                        .required(\"Обов'язкове поле\")\r\n                        .oneOf(\r\n                            [Yup.ref('password'), null],\r\n                            'Паролі не співпадають',\r\n                        ),\r\n                    name: Yup.string()\r\n                        .min(1, \"Ім'я не може бути порожнім\")\r\n                        .max(12, \"Ім'я не може бути більше 12 символів\")\r\n                        .required(\"Обов'язкове поле\"),\r\n                })}\r\n            >\r\n                {props => {\r\n                    const {\r\n                        values,\r\n                        touched,\r\n                        errors,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                    } = props;\r\n                    return (\r\n                        <div className=\"form__filter\">\r\n                            {/* //Форма для реєстрації */}\r\n                            <form className=\"form\" onSubmit={handleSubmit}>\r\n                                {/* //Логотип */}\r\n                                <div className=\"form__logo\">\r\n                                    <Logo />\r\n                                </div>\r\n\r\n                                {/* //Поле для вводу емейла */}\r\n                                <label className=\"form__label\">\r\n                                    {errors.email && touched.email ? (\r\n                                        <div style={{ color: 'red' }}>\r\n                                            {errors.email}\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div style={{ height: '19px' }}></div>\r\n                                    )}\r\n\r\n                                    <svg className=\"form__icon\">\r\n                                        <use href={`${sprite}#email`}></use>\r\n                                    </svg>\r\n                                    <input\r\n                                        className=\"form__input\"\r\n                                        type=\"email\"\r\n                                        name=\"email\"\r\n                                        placeholder=\"E-mail\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.email}\r\n                                    />\r\n                                </label>\r\n\r\n                                {/* //Поле для вводу пароля */}\r\n                                <label className=\"form__label\">\r\n                                    {errors.password && touched.password ? (\r\n                                        <div style={{ color: 'red' }}>\r\n                                            {errors.password}\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div style={{ height: '19px' }}></div>\r\n                                    )}\r\n                                    <svg className=\"form__icon\">\r\n                                        <use href={`${sprite}#password`}></use>\r\n                                    </svg>\r\n                                    <input\r\n                                        className=\"form__input\"\r\n                                        type={type}\r\n                                        name=\"password\"\r\n                                        placeholder=\"Пароль\"\r\n                                        onChange={handleChange}\r\n                                        // onKeyUp={strength}\r\n                                        onFocus={() => setShowLine(true)}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.password}\r\n                                    />\r\n                                    <span\r\n                                        className=\"form__show\"\r\n                                        onClick={showHiden}\r\n                                    >\r\n                                        {type === 'input' ? 'HIDE' : 'SHOW'}\r\n                                    </span>\r\n                                </label>\r\n\r\n                                {/* //Поле для вводу пароля підтвердження */}\r\n                                <label className=\"form__label\">\r\n                                    {errors.confirmPassword &&\r\n                                    touched.confirmPassword ? (\r\n                                        <div style={{ color: 'red' }}>\r\n                                            {errors.confirmPassword}\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div style={{ height: '19px' }}></div>\r\n                                    )}\r\n                                    <svg className=\"form__icon\">\r\n                                        <use href={`${sprite}#password`}></use>\r\n                                    </svg>\r\n                                    <input\r\n                                        className=\"form__input\"\r\n                                        type=\"password\"\r\n                                        name=\"confirmPassword\"\r\n                                        placeholder=\"Підтвердити пароль\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.confirmPassword}\r\n                                    />\r\n                                    <PasswordIndicator\r\n                                        show={showLine}\r\n                                        password={values.password}\r\n                                    />\r\n                                </label>\r\n\r\n                                {/* //Поле для вводу імені */}\r\n                                <label className=\"form__label\">\r\n                                    {errors.name && touched.name ? (\r\n                                        <div style={{ color: 'red' }}>\r\n                                            {errors.name}\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div style={{ height: '19px' }}></div>\r\n                                    )}\r\n                                    <svg className=\"form__icon\">\r\n                                        <use href={`${sprite}#name`}></use>\r\n                                    </svg>\r\n                                    <input\r\n                                        className=\"form__input\"\r\n                                        type=\"name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Ваше імя\"\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.name}\r\n                                    />\r\n                                </label>\r\n\r\n                                {/* //Кнопка для відправки даних */}\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"form__button form__button--active\"\r\n                                >\r\n                                    РЕЄСТРАЦІЯ\r\n                                </button>\r\n\r\n                                {/* //Перехід на сторінку входу */}\r\n                                <Link to=\"/login\" className=\"form__button\">\r\n                                    ВХІД\r\n                                </Link>\r\n                            </form>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </section>\r\n    );\r\n};\r\n","import { useDispatch } from 'react-redux';\r\nimport React, { useEffect } from 'react';\r\nimport './ModalLogout.scss';\r\nimport { userOperation } from '@redux/user/user-operation';\r\nimport { closeModalLogout } from '@redux/user/user-slice';\r\n\r\nexport const ModalLogout = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    function closeLogoutModal() {\r\n        dispatch(closeModalLogout());\r\n    }\r\n\r\n    useEffect(() => {\r\n        const backdrop = document.querySelector('#backdrop');\r\n\r\n        function clickBackdrop(e) {\r\n            if (e.target === backdrop) {\r\n                closeLogoutModal();\r\n            }\r\n        }\r\n\r\n        function pressEsc(e) {\r\n            if (e.code === 'Escape') {\r\n                closeLogoutModal();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', clickBackdrop);\r\n        document.addEventListener('keydown', pressEsc);\r\n\r\n        return function cleanup() {\r\n            document.removeEventListener('click', clickBackdrop);\r\n            document.removeEventListener('keydown', pressEsc);\r\n        };\r\n    }, [closeLogoutModal]);\r\n\r\n    return (\r\n        <div className=\"containerLogout\">\r\n            <p className=\"textLogout\">Ви впевненні?</p>\r\n            <div>\r\n                <button\r\n                    className=\"btnLogout\"\r\n                    type=\"button\"\r\n                    onClick={() => dispatch(userOperation.logout())}\r\n                >\r\n                    <span>Вийти</span>\r\n                </button>\r\n                <button className=\"btnLogout\" onClick={closeLogoutModal}>\r\n                    Скасувати\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"sourceRoot":""}